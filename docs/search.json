[
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Website Ideas",
    "section": "",
    "text": "Landing Page (About)\nTest Page - Create Skeleton\nResume\nProjects Page - Create Skeleton\n\nPersonal notes on how to build a quarto website\nPassing VBA to R\nFile Crawler R Script\nVBA Extractor Python Script\nCSV Extractor Python Script\nMarch Madness\nSnakes & Ladders\nExcel Scheduler\n\nPembroke‚Äôs - Create Skeleton\n\nDescription of what Pembroke‚Äôs is\nMenu w/Brew Methods & Recipes\nCocktails\nWhat others say - Read our customer testimonials to see why people love our services and keep coming back!\n\nExam notes\n\nExam PA\n\nWrigley Dog-Sitting website\n\nUpdate sidebar w/photo + contact info\n\nLinks to social networks\n\nGitHub, Linkedin, Facebook, Instagram,¬†Untappd"
  },
  {
    "objectID": "wrigley.html#about",
    "href": "wrigley.html#about",
    "title": "Wrigley Dog Sitting",
    "section": "About",
    "text": "About\n\nSex: M\nBreed: Pembroke Welsh Corgi\nColor: Tricolor\nBirthday: 03/16/2020\nMicrochip: 956000012570863\nNeutered: Yes"
  },
  {
    "objectID": "wrigley.html#contact-information",
    "href": "wrigley.html#contact-information",
    "title": "Wrigley Dog Sitting",
    "section": "üìû Contact Information",
    "text": "üìû Contact Information\n\nKelsey: (630) 400-5971\nNick: (847) 845-9953\nAddress: 4034 Pompton Ct, Elgin, IL 60124"
  },
  {
    "objectID": "wrigley.html#vet-information",
    "href": "wrigley.html#vet-information",
    "title": "Wrigley Dog Sitting",
    "section": "‚öïÔ∏è Vet Information",
    "text": "‚öïÔ∏è Vet Information\n\nCleveland Veterinary Clinic\nPhone: (847) 697-4066\n400 N McLean Blvd, South Elgin, IL 60177"
  },
  {
    "objectID": "wrigley.html#food",
    "href": "wrigley.html#food",
    "title": "Wrigley Dog Sitting",
    "section": "üçó Food",
    "text": "üçó Food\n\nTwice a day: Before morning walk and ~5pm\nOne scoop (1/3 Cup) w/small amount of whipped cream\n\n\nüçé Treats (few per day)\n\nIce cubes\nChunks of cheese\nDog Ice Cream\nBlueberry yogurt\nHot Dog\nPupperoni (Rope ball or sniffle mat)\n\n\n\n‚ò†Ô∏è Toxic Foods\n\nChocolate\nAvocados\nGrapes/Raisins\nGarlic/Onions\nJalape√±o/Spices"
  },
  {
    "objectID": "wrigley.html#walks",
    "href": "wrigley.html#walks",
    "title": "Wrigley Dog Sitting",
    "section": "ü¶Æ Walks",
    "text": "ü¶Æ Walks\n\n7:00 AM walks\nApprox. 2 mile before he gets tired\nUnderstands ‚ÄúWait‚Äù and ‚ÄúLet‚Äôs Cross‚Äù\n\nPay close attention at crosswalks so he does not wonder into traffic\n\nExpect him to resist at the start of the walk, but he‚Äôll cooperate once you get going"
  },
  {
    "objectID": "wrigley.html#potty-schedule",
    "href": "wrigley.html#potty-schedule",
    "title": "Wrigley Dog Sitting",
    "section": "üßª Potty Schedule",
    "text": "üßª Potty Schedule\n\nTwice a day (at least)\n\nMorning walk\nIn the evening after dinner\n\nPutting him in his harness is a game for him ‚Üí He will run away so you have to chase him\nHas gone 8 hours in between potty breaks before\nExtra poop bags are in the coat closet across from the kitchen table"
  },
  {
    "objectID": "wrigley.html#commands",
    "href": "wrigley.html#commands",
    "title": "Wrigley Dog Sitting",
    "section": "üó£Ô∏è Commands",
    "text": "üó£Ô∏è Commands\n\nSit / Lay Down\nUp / Off\nSpeak\nTouch (the bells)\nWait\nDrop\nKisses\nPaw\nHigh Five!\nRoll Over (where he falls to his side)\nAre you‚Ä¶\n\nhungry?\n\nDo you‚Ä¶\n\nhave to go potty?\nwant to go outside?\nwant to go for a walk?\nwant food?\nwant a treat?\nwant cuddles?\nwant scratches?\nwant to go to bed?"
  },
  {
    "objectID": "projects/vba-extractor.html",
    "href": "projects/vba-extractor.html",
    "title": "VBA Extractor Python Script",
    "section": "",
    "text": "This Python script scans the current directory for Excel files and extracts their VBA code into a dedicated subfolder named after the workbook. If multiple workbooks are present in the directory, the script prompts the user to specify the file to process.\n\nHow to use:\n\nSave this script as a .py file in the folder (using File Explorer) that contains the desired Excel workbook(s)\nDouble-click the script file to execute it\nIf multiple workbooks are detected, select the desired file from the list when prompted\nThe extracted VBA code will be saved in a subfolder named &lt;workbook_name&gt;_vba\n\n\n\nPython Code\nimport os\nimport shutil\nimport subprocess\nimport sys\n\n## Check if a package is installed, and install it if not\ndef install_package(package):\n    try:\n        __import__(package)\n        print(f\"{package} is already installed.\")\n    except ImportError:\n        print(f\"{package} is not installed. Installing...\")\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"--user\", package])\n\n## Install necessary packages only if not already installed\ntry:\n    import oletools\nexcept ImportError:\n    install_package('oletools')\nfrom oletools.olevba3 import VBA_Parser\n\n\n# 2. Define the file extensions and settings\nEXCEL_FILE_EXTENSIONS = ('xlsb', 'xlsx', 'xlsm')\nKEEP_NAME = False  # Set this to True if you would like to keep \"Attribute VB_Name\"\n\n\n# 3. Define functions\ndef parse(workbook_path):\n    print(f\"Processing workbook: {workbook_path}\")\n    # Create a subfolder named &lt;workbook_name&gt;_vba for saving the extracted VBA code\n    workbook_name = os.path.splitext(os.path.basename(workbook_path))[0]\n    vba_path = f'{workbook_name}_vba'  # Create a folder name using the workbook name\n    if not os.path.exists(vba_path):\n        os.makedirs(vba_path)\n        print(f\"Created directory for VBA exports: {vba_path}\")\n    # Parse the workbook for VBA macros\n    vba_parser = VBA_Parser(workbook_path)\n    if vba_parser.detect_vba_macros():\n        print(f\"VBA macros detected in {workbook_path}. Extracting macros...\")\n        vba_modules = vba_parser.extract_all_macros()\n        if not vba_modules:\n            print(f\"Warning: No modules extracted from {workbook_path}.\")\n    else:\n        print(f\"No VBA macros detected in {workbook_path}. Skipping this file.\")\n        return  # Skip processing this workbook if no VBA macros are found\n    # Process each macro module in the workbook\n    for _, _, filename, content in vba_modules:\n        print(f\"Processing VBA module: {filename}\")\n        # Decode the VBA content and split into lines\n        decoded_content = content\n        lines = decoded_content.split('\\r\\n') if '\\r\\n' in decoded_content else decoded_content.split('\\n')\n        if lines:\n            content = []\n            for line in lines:\n                # Filter lines based on VB_Name if KEEP_NAME is set\n                if line.startswith('Attribute') and 'VB_' in line:\n                    if 'VB_Name' in line and KEEP_NAME:\n                        content.append(line)\n                else:\n                    content.append(line)\n            # If content has non-empty lines, write to file\n            if content and content[-1] == '':\n                content.pop(len(content) - 1)\n            non_empty_lines_of_code = len([c for c in content if c])\n            if non_empty_lines_of_code &gt; 0:\n                print(f\"  - Extracted {non_empty_lines_of_code} lines of VBA code from module {filename}.\")\n                with open(os.path.join(vba_path, filename), 'w', encoding='utf-8') as f:\n                    f.write('\\n'.join(content))\n                print(f\"  - VBA code from {filename} saved to {os.path.join(vba_path, filename)}\\n\")\n            else:\n                print(f\"  - No usable code in {filename}. Skipping save.\\n\")\n        else:\n            print(f\"  - Empty or malformed content in module {filename}. Skipping.\\n\")\ndef process_workbooks():\n    print(\"\\nStarting workbook processing...\\n\")\n    # Get all Excel files in the current directory\n    excel_files = [f for f in os.listdir('.') if os.path.isfile(f) and f.lower().endswith(EXCEL_FILE_EXTENSIONS)]\n    # Check if there are any Excel files\n    if not excel_files:\n        print(\"No Excel files found in the current directory.\")\n        input(\"Press Enter to exit...\")\n        sys.exit()\n    # Display the files for selection\n    print(\"Excel files found in the current directory:\")\n    for i, file_name in enumerate(excel_files, start=1):\n        print(f\"{i}. {file_name}\")\n    # Prompt user to select a file\n    while True:\n        try:\n            file_index = int(input(\"\\nEnter the number corresponding to the file you want to process: \")) - 1\n            if 0 &lt;= file_index &lt; len(excel_files):\n                selected_file = excel_files[file_index]\n                break\n            else:\n                print(\"Invalid selection. Please enter a number corresponding to the listed files.\")\n        except ValueError:\n            print(\"Invalid input. Please enter a number.\")\n    # Process the selected file\n    parse(selected_file)\n    print(\"\\nProcessing complete. All eligible workbooks have been processed.\\n\")\n\n\n# Step 4. Execute the main workflow\nif __name__ == '__main__':\n    process_workbooks()\n    input(\"Press Enter to exit...\")  # Keep the window open",
    "crumbs": [
      "Projects/Tools",
      "VBA Extractor Python Script"
    ]
  },
  {
    "objectID": "projects/pass-vba-through-r.html#vba-module",
    "href": "projects/pass-vba-through-r.html#vba-module",
    "title": "Passing Variables From Excel/VBA Through R",
    "section": "VBA Module",
    "text": "VBA Module\n'Sub will store variables from cells A1 and A2, trigger an R script via command line, and pass those values through the R script\n\nSub RunRscript()\n\n    Dim shell As Object\n    Set shell = VBA.CreateObject(\"WScript.Shell\")\n    Dim waitTillComplete As Boolean: waitTillComplete = True\n    Dim style As Integer: style = 1\n    Dim errorCode As Integer\n    Dim var1, var2 As Double\n    Dim RPath, ScriptPath, VarList As String\n\n    var1 = Sheet1.Range(\"A1\").Value\n    var2 = Sheet1.Range(\"A2\").Value\n    VarList = var1 & \" \" & var2\n    \n    RPath = \"RScript\"\n    ScriptPath = \"C:/Users/nickledonne/Desktop/Test.R\"\n     \n    errorCode = shell.Run(RPath & \" \" & Chr(34) & ScriptPath & Chr(34) & \" \" & VarList, style, waitTillComplete)\n        \nEnd Sub\nTroubleshooting (Windows):\n\nYou may receive the error Method ‚ÄòRun‚Äô of object ‚ÄòIWshShell3‚Äô failed. This likely means your VBA Module doens‚Äôt have the correct permissions to trigger R.\nMethod 1: Changing your User Path\n\nNavigate to: Control Panel &gt;&gt; User Accounts &gt;&gt; User Accounts (Again) &gt;&gt; Change my environment variables\nIn the top section labeled User Variables, edit the PATH variable to include the path where Rscript.exe is installed on your desktop.\nYou may need to restart your computer afterwards.\n\nMethod 2: Specify R Path within VBA\n\nSubstitute in the following: RPath = C:/Users/nickledonne/Desktop/R-4.4.2/bin/bin/x64/Rscript.exe\"\nThis may prevent other users from running the script and is therefore NOT recommended.\n\nFor more details see Running RScript through command prompt at http://shashiasrblog.blogspot.com/2013/",
    "crumbs": [
      "Projects/Tools",
      "Passing Variables From Excel/VBA Through R"
    ]
  },
  {
    "objectID": "projects/pass-vba-through-r.html#r-script",
    "href": "projects/pass-vba-through-r.html#r-script",
    "title": "Passing Variables From Excel/VBA Through R",
    "section": "R Script",
    "text": "R Script\n# Script will receive the arguments passed via VBA script, sum those \n# values together, and write to .csv\n\nargs &lt;- commandArgs(trailingOnly=T)\n\nvar1 &lt;- as.numeric(args[1])\nvar2 &lt;- as.numeric(args[2])\n\nSum &lt;- var1 + var2\n\n# Write to desktop\nwrite.csv(Sum, \"C:/Users/nickledonne/Desktop/Test_Output.csv\", row.names = FALSE)\nComments:\n\nMake sure the variables in the VBA script align with the R script.\nVariables will be passed into R as strings. Use the as.numeric() function to convert those input variables as needed.",
    "crumbs": [
      "Projects/Tools",
      "Passing Variables From Excel/VBA Through R"
    ]
  },
  {
    "objectID": "sheet.html",
    "href": "sheet.html",
    "title": "Google Sheets Integration Example",
    "section": "",
    "text": "Below is the data fetched from the Google Sheet:\nLink to Workbook"
  },
  {
    "objectID": "projects/file-crawler.html",
    "href": "projects/file-crawler.html",
    "title": "File Crawler R Script",
    "section": "",
    "text": "The get_filtered_filelist R function provides a more efficient way to search through directories based on inclusion/exclusion criteria, particularly for large file systems. It is designed to crawl through a specified folder, apply inclusion and exclusion filters based on patterns, and return a filtered list of files.\n\nFunction Definition\n# Load required packages\nlibrary(dplyr)\nlibrary(stringr)\n\nget_filtered_filelist &lt;- function(folder_path, # directory to search within\n                                  pattern_exclude = NULL, # vector of patterns to exclude from the results\n                                  pattern_include = NULL, # vector of patterns to include in the results\n                                  pattern_include_logic = \"OR\",  # \"OR\" or \"AND\"\n                                  output_to_csv = FALSE, # Outputs the filtered file list to a temporary CSV\n                                  ) {\n\n  filelist &lt;- list.files(path = folder_path, \n                         full.names = TRUE, \n                         recursive = TRUE)\n\n  filelist &lt;- filelist[!grepl(\"~\", filelist)]\n\n  # Apply exclusions\n  if (!is.null(pattern_exclude)) {\n    filelist &lt;- filelist[!grepl(paste(pattern_exclude, collapse = \"|\"), filelist)]\n  }\n\n  # Apply inclusions depending on pattern_include_logic\n  if (!is.null(pattern_include)) {\n    if (pattern_include_logic == \"OR\") {\n      filelist &lt;- filelist[grepl(paste(pattern_include, collapse = \"|\"), filelist)]\n    } else if (pattern_include_logic == \"AND\") {\n      for (pattern in pattern_include) {\n        filelist &lt;- filelist[grepl(pattern, filelist)]\n      }\n    } else {\n      stop(\"Invalid pattern_include_logic specified. Please use 'OR' or 'AND'.\")\n    }\n  }\n\n  file_tibble &lt;- tibble(filepath = filelist)\n\n  if (output_to_csv) {\n    temp_file &lt;- tempfile(fileext = \".csv\")\n    write.csv(file_tibble, temp_file, row.names = FALSE)\n    shell(temp_file, wait = FALSE)\n  } else {\n    print(file_tibble)\n  }\n\n  return(file_tibble)\n}\n\n\nInstall missing libraries using:\ninstall.packages(c(\"dplyr\", \"stringr\"))\n\n\nFunction Usage\nfilelist &lt;- get_filtered_filelist(\n  folder_path = \"C:/Users/Documents\",\n  pattern_exclude = c(\".xlsb\"),\n  pattern_include = c(\"Calendar\", \"Holiday\"),\n  pattern_include_logic = \"AND\",\n  output_to_csv = FALSE\n)",
    "crumbs": [
      "Projects/Tools",
      "File Crawler R Script"
    ]
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Developed Projects/Tools",
    "section": "",
    "text": "VBA Extractor\nFilelist Crawler\nPass VBA to R\nMarch Madness\nBulk Excel File Manipulation\nExcel-to-CSV Splitter",
    "crumbs": [
      "Projects/Tools"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nicholas LeDonne",
    "section": "",
    "text": "4034 Pompton Ct, Elgin, IL 60124 Nicholas.LeDonne@gmail.com (847) 845-9953",
    "crumbs": [
      "Resume"
    ]
  },
  {
    "objectID": "index.html#work-experience",
    "href": "index.html#work-experience",
    "title": "Nicholas LeDonne",
    "section": "Work Experience",
    "text": "Work Experience\n\nSenior Actuarial Analyst ‚Äì Pricing Modeling\n\nCentene Corporation 2019 ‚Üí Current | Chicago, IL\n\nResponsible for development of pricing and filing models that support Centene‚Äôs ACA individual health products\nDeveloped series of scripts that housed and produced Actuarial Memorandums for state filings\nStage projected membership for internal pricing model, including deploying R Shiny app for visualizations\nAssist in maintaining internal R packages and processes\nDevelop and maintain internal VBA suite of macros/functions\n\n\n\n\nActuarial Analyst ‚Äì Regional Services, Reserving Expert\n\nAetna Inc. 2016 ‚Üí 2018 | Chicago, IL\n\nLead teams during monthly reserve cycles in analyzing hundreds of large claims to guarantee timely/accurate accruals\n\nInvolved in creating LCAD (large claims accrual database)\n\nHelped construct Aetna‚Äôs actuarial training program by designing a website and coordinating a presentation series\n\nCollaborated with underwriting and sales departments on custom benefit requests\n\nSupported rating systems maintenance, small group rate testing/filing, and large group pricing\n\nAssisted with talent recruitment by interviewing candidates and attending career fairs\n\n\n\n\nFacility Adviser\n\nNIU Campus Recreation Center 2015 | Dekalb, IL\n\nCollaborated with management to report and address facility issues\nHandled patron complaints effectively, improving customer satisfaction\nEnsured patron safety by responding to emergencies within and outside the facility",
    "crumbs": [
      "Resume"
    ]
  },
  {
    "objectID": "index.html#technical-skills",
    "href": "index.html#technical-skills",
    "title": "Nicholas LeDonne",
    "section": "Technical Skills",
    "text": "Technical Skills\n\nExpertise in R\n\nAdvanced data manipulation, particularly using tidyverse package suite\nPackage development\nRStudio Connect and S3 integration\n\n\n\nExpertise in VBA/Excel\n\nCustom UDF development\nProcedure realignment with a focus on modularity and efficiency\n\n\n\nOther Proficiencies\n\nPython, SQL, HTML, and C++",
    "crumbs": [
      "Resume"
    ]
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Nicholas LeDonne",
    "section": "Education",
    "text": "Education\n\nNorthern Illinois University\nBS in Statistics (Emphasis in Actuarial Science), Minor in Finance\n2012 ‚Üí 2015 | DeKalb, IL\n\n\nExam Progress\n\nP, FM, IFM, SRM, PA, ATPA, FAP, VEE",
    "crumbs": [
      "Resume"
    ]
  },
  {
    "objectID": "pembrokes.html",
    "href": "pembrokes.html",
    "title": "Pembroke‚Äôs",
    "section": "",
    "text": "Coming Soon‚Ä¶\n\n\nTraditional Espresso Offerings\n\nEspresso\nThis is a double shot of espresso showcasing our Jaywalker blend. It‚Äôs approximately two ounces of super-concentrated coffee.\nLatte\nEspresso-based drink with steamed milk and a thin, silky layer of textured milk.\nAmericano\nEspresso over water made to order. Similar amount of caffeine to batch brewed coffee of the same size.\nCortado\nA double shot drink with equal parts espresso and steamed milk.\nCappuccino\nEspresso-based drink with steamed milk and a thick, smooth layer of textured milk.\n\nAdd Syrup! Ask your barista what syrup options are available.\n\n\n\nExceptional Coffee Brewing Methods\n\nAeropress\nA manual brewing device that uses air pressure to push water through coffee grounds, producing a clean, smooth cup.\nChemex\nA pour-over brewing method using a paper filter, known for producing a clean, light, and crisp cup of coffee.\nCold Brew\nA slow-brewing method using cold water and coarse coffee grounds, steeped for an extended time for a smooth, mellow flavor.\nFrench Press\nA classic immersion brewing method where coffee grounds are steeped in hot water, then separated using a metal filter.\nV60\nA precise pour-over brewing method that emphasizes control over water flow for a balanced, flavorful cup.",
    "crumbs": [
      "Pembroke's"
    ]
  }
]